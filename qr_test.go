package gocircuitexternal

import (
	"encoding/json"
	"math/big"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestQRData(t *testing.T) {
	// expected source
	// https://github.com/anon-aadhaar/anon-aadhaar/blob/main/packages/circuits/assets/test.json
	source := `{
  "testQRData": "8259163575998395410294216884136380469956685892150052488437065451544537272028823381012058331104900016170949862194992078675406411614673500428635982291062028490923003780630984433423301235105417377787131661931984964599727049255285879318792495236619560961528175330528230923044174467379560397653507051470100248395988491800303621193017585564341319296489036716964773497652480922601816247855475394255072055155630865556422666204858735313430441358989197942359085778977252174914218750831324262405073486188565379661087624387219845602810004409858067060582723830310306954192817345000453273623216177755588322887355541803994258569827849151852254798713294190907648230081077510592816508733759309449554841585969816906585446495429295879085493920989281432124264686964836843412063229868917416620953791606506977061635857869230322961966933040081525837759953018919032951374647284949205876501534604609019655215562471603371161946541957137254612227929914099003888563475886540925722627409182118438133540745135873329891527671405288082042105248606397547696373988012429641765957373215164223914638446054352114848994560273925881966532950058515181388759591132298529623987123194227812330918793321242727635507097775073470913531111624493576370385944481779207499154345692800114586514930018253620629510671404966362557857641999589084996038042041566831142437243583312354405809351126154203741507594162846336352179343954609499386129314707436439498170844738212884179575970184067773906023308700304595766504002059225628845131658391808799061443662643244237433587394532910535053813919941235917069445490288535690770254964055050593379778806503841922391399545982769046149777275410414936802378789310715386469101351083935892919710110707167748324213165552014082126981342105688852994389004329229607011870745132085215561769894535198146559591966109398235088570991674596662725913989312687633451215056181618710951495328959829445355475946382007067174484187843829682632075742981527603170017383558567515525142187900818201598762722436016733654029911649550767959827096893303631543278516100843293421762867984506025935441477253344987175034417916079625625371854046567321295833019522935272303724497663116543666998220335640687972062287455715754417604421981525656917538633268735987248122223688953567669389081610408785753661463406540493356023533353414845665187659296301626231138335599426042956724260221272505774023358411257317356159623167122090889680494391699098612891443839591040158364788967761812547722827975134074249498746600141474162623701225599279053137171665029207049665126886560795303043957258835332398217358504670108540440086553112969204911544457383791164248286490428962205833992719109104066885727003793530534239190322145789868094191824916635003885589340787668337395036427004773582592606136970224829885297327946705251124207201157878059391302841686982381058544860043878906081086431706218579038805094181604734876076823217950098303441193151451328000264195608403604158930298446358926216003325046476113401255186582872417002832207916555599681630457718321743339538760995883798622573729834417735834210649314285763784726287210633344224738479199260435876897373634088311958610480853339605575937005219222939598641467868545589588057047581729376964",
  "undefined": "V2",
  "Email_mobile_present_bit_indicator_value": "3",
  "ReferenceId": "269720240420014552930",
  "Name": "Sumit Kumar",
  "DOB": "01-01-1984",
  "Gender": "M",
  "CareOf": "C/O Ishwar Chand",
  "District": "East Delhi",
  "Landmark": "",
  "House": "B-31, 3rd Floor",
  "Location": "",
  "PinCode": "110051",
  "PostOffice": "Krishna Nagar",
  "State": "Delhi",
  "Street": "Radhey Shyam Park Extension",
  "SubDistrict": "Gandhi Nagar",
  "VTC": "Krishna Nagar",
  "PhoneNumberLast4": "1234"
}`

	expected := map[string]string{}
	err := json.Unmarshal([]byte(source), &expected)
	require.NoError(t, err)

	qrDataBI, ok := big.NewInt(0).SetString(expected["testQRData"], 10)
	require.True(t, ok)
	actual := &AnonAadhaarDataV2{}
	err = actual.UnmarshalQR(qrDataBI)
	require.NoError(t, err)

	assert.Equal(t, expected["undefined"], actual.Version, "Version mismatch")
	assert.Equal(t, expected["Email_mobile_present_bit_indicator_value"], actual.ContactIndecator, "ContactIndicator mismatch")
	assert.Equal(t, expected["ReferenceId"], actual.ReferenceID, "ReferenceID mismatch")
	assert.Equal(t, expected["Name"], actual.Name, "Name mismatch")
	assert.Equal(t, expected["DOB"], actual.DateOfBirth, "DateOfBirth mismatch")
	assert.Equal(t, expected["Gender"], actual.Gender, "Gender mismatch")
	assert.Equal(t, expected["CareOf"], actual.Address.CareOf, "CareOf mismatch")
	assert.Equal(t, expected["District"], actual.Address.District, "District mismatch")
	assert.Equal(t, expected["Landmark"], actual.Address.Landmark, "Landmark mismatch")
	assert.Equal(t, expected["House"], actual.Address.House, "House mismatch")
	assert.Equal(t, expected["Location"], actual.Address.Location, "Location mismatch")
	assert.Equal(t, expected["PinCode"], actual.Address.PinCode, "PinCode mismatch")
	assert.Equal(t, expected["PostOffice"], actual.Address.PostOffice, "PostOffice mismatch")
	assert.Equal(t, expected["State"], actual.Address.State, "State mismatch")
	assert.Equal(t, expected["Street"], actual.Address.Street, "Street mismatch")
	assert.Equal(t, expected["SubDistrict"], actual.Address.SubDistrict, "SubDistrict mismatch")
	assert.Equal(t, expected["VTC"], actual.Address.VTC, "VTC mismatch")
	assert.Equal(t, expected["PhoneNumberLast4"], actual.MobileLastDigits, "MobileLastDigits mismatch")
}

func TestNewQRInputs(t *testing.T) {
	data := "8259163575998395410294216884136380576185817320339145460288951755287582961380611852552428987321584902318624273479337130653734982789439199350807739714406680256506601030028361685736660257517232716829232450159251789263870750283214820475102793105777087762238893090228084052270739203426767272062178826235941508196284529472654271516164224874687419158221021213944829682919423174703783469927383220474654008065915029614141226522064062660593170425792840873655513538373377850112144063189928583588899889878172757870400281696669604010659786496608127700010264443115263361656744433002559396889060190428705316366290450741550935385486607346514118464415324976934593027192262025619948063647667007927187736245772179085671658409804311603784752615097922989017361163561315974008304022542448394278143245816470881130080719485003834016131185071765229491892891069788319670287394271744730364788949609836924781874523936880888005883165757273872375006288978183466996520618718348187182821516617721340861010989807614756396013627238651856164981477576514065364628430139194213240602981419233621531616776712580234318576148789862972873366521755587675635811636464535551028275057950562020714225333126426609311459495088802145911084644641596208432517247324679678535859879970296810837735288916946197174410518342751033634782712968162882714769666441813893046220965525694847349131353986974388432968669605721975441870936552792275255624723251162192468002453471184713983574359601113515796454264270501379717344206777921353459767049560942843350534472442799601294637063232419543855742825887931841338302499933012059977947394755335155868283405337181095220998277373266658634859632929226320059674299759100792654417315629048732480315019941928105082550091217622422743467170706956093632228513797781797454779203616427853022505097310749994766657051986303478622173767936568165644251615127773430128638507677775244195799780291921828512257290767451475181728141544788756907393883042588060697683541401090581157249784874529424005078918452607589129440476242749110421616270676359722523229311894327359615548588038186027827017569331332262329182564217789843145105509621002324556840213928256545454178891208004109769624959566302976213521762873815749009289995208912424872527724417047936432945498377307452190302923489092664437908497749093491199476080757200233878726847198496754472664256996743796092233459542884818717466621372105594672115988382565552756801323160697003960485232732393383241422077506009076922303757067128564302338914230360252223406874457414109774901980252709597099278192874164252010830754720603092419792069707099362278082792090307065378744856387301364608460967253691290230861162587170799141457093188189022390589265654613500974699477990974878105678883229707694455342266695530373994049224098435972125150350136428446936271698977517627416435999970351222450833295217051468307037908262231982382247410542334757724852032521780157518474618653527191342825230455100778913195115477763082159513429761573752871477695723697689470263993132596482716347199834315782099668846081963760553679915994617396376870314998926788197388410764535427795200340714967872713095483294486407886767431404892448155562283436571050452251042117926586451385682519188252281397"
	qrDataBI, ok := big.NewInt(0).SetString(data, 10)
	require.True(t, ok)
	a := &AnonAadhaarDataV2{}
	err := a.UnmarshalQR(qrDataBI)
	require.NoError(t, err)

	_, err = NewQRInputs(a)
	require.NoError(t, err)
}
