package gocircuitexternal

import (
	"encoding/json"
	"flag"
	"fmt"
	"math/big"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
)

var debug = flag.Bool("debug", false, "enable debug logs")

const testdata = "8259163575998395410294216884136380576185817320339145460288951755287582961380611852552428987321584902318624273479337130653734982789439199350807739714406680256506601030028361685736660257517232716829232450159251789263870750283214820475102793105777087762238893090228084052270739203426767272062178826235941508196284529472654271516164224874687419158221021213944829682919423174703783469927383220474654008065915029614141226522064062660593170425792840873655513538373377850112144063189928583588899889878172757870400281696669604010659786496608127700010264443115263361656744433002559396889060190428705316366290450741550935385486607346514118464415324976934593027192262025619948063647667007927187736245772179085671658409804311603784752615097922989017361163561315974008304022542448394278143245816470881130080719485003834016131185071765229491892891069788319670287394271744730364788949609836924781874523936880888005883165757273872375006288978183466996520618718348187182821516617721340861010989807614756396013627238651856164981477576514065364628430139194213240602981419233621531616776712580234318576148789862972873366521755587675635811636464535551028275057950562020714225333126426609311459495088802145911084644641596208432517247324679678535859879970296810837735288916946197174410518342751033634782712968162882714769666441813893046220965525694847349131353986974388432968669605721975441870936552792275255624723251162192468002453471184713983574359601113515796454264270501379717344206777921353459767049560942843350534472442799601294637063232419543855742825887931841338302499933012059977947394755335155868283405337181095220998277373266658634859632929226320059674299759100792654417315629048732480315019941928105082550091217622422743467170706956093632228513797781797454779203616427853022505097310749994766657051986303478622173767936568165644251615127773430128638507677775244195799780291921828512257290767451475181728141544788756907393883042588060697683541401090581157249784874529424005078918452607589129440476242749110421616270676359722523229311894327359615548588038186027827017569331332262329182564217789843145105509621002324556840213928256545454178891208004109769624959566302976213521762873815749009289995208912424872527724417047936432945498377307452190302923489092664437908497749093491199476080757200233878726847198496754472664256996743796092233459542884818717466621372105594672115988382565552756801323160697003960485232732393383241422077506009076922303757067128564302338914230360252223406874457414109774901980252709597099278192874164252010830754720603092419792069707099362278082792090307065378744856387301364608460967253691290230861162587170799141457093188189022390589265654613500974699477990974878105678883229707694455342266695530373994049224098435972125150350136428446936271698977517627416435999970351222450833295217051468307037908262231982382247410542334757724852032521780157518474618653527191342825230455100778913195115477763082159513429761573752871477695723697689470263993132596482716347199834315782099668846081963760553679915994617396376870314998926788197388410764535427795200340714967872713095483294486407886767431404892448155562283436571050452251042117926586451385682519188252281397"

func TestAnonAadhaarV1(t *testing.T) {
	bi, ok := big.NewInt(0).SetString(testdata, 10)
	require.True(t, ok)

	parser, err := newQRParser(bi)
	require.NoError(t, err)

	_, _, delimiterIndices, _, err := parser.payload()
	require.NoError(t, err)
	require.Equal(t,
		[]int{
			2, 4, 26, 38, 49, 51,
			68, 79, 80, 96, 97, 104,
			118, 124, 152, 165, 179, 184,
		},
		delimiterIndices,
	)
}

func TestAnonAadhaarInputsMarshalV1(t *testing.T) {
	bi, ok := big.NewInt(0).SetString(testdata, 10)
	require.True(t, ok)
	inputs := AnonAadhaarV1Inputs{
		QRData:                          bi,
		IssuerID:                        "did:iden3:privado:main:2Si3eZUE6XetYsmU5dyUK2Cvaxr1EEe65vdv2BML4L",
		CredentialSubjectID:             "did:iden3:privado:main:2Scn2RfosbkQDMQzQM5nCz3Nk5GnbzZCWzGCd3tc2G",
		CredentialStatusRevocationNonce: 954548273,
		CredentialStatusID:              "https://issuer-node-core-api-demo.privado.id/v2/agent",
		PubKey: `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlegfdQZZXMJirdz93TXY
BAVbKt9G3HGcVrWO7hmZle+hoyVHEGIKx4Ael29E475FTbDxkOP31ONZiXIRc0Te
Uvz3gm+ElIipWaez0h623QNFFmLqiD7u796ImhSZuaR/lQTF8JbCYrltI9GXUDMt
npfrYUHSYd6XmU1MQWPKnL4+B3IhtEJT3PgWCUKLaDUe4+m2DSs1H9qm7owoqEUj
n5fefMD+XRROR0gT+0PsWD+BtO4yjCIWczSJjSELoBeibsaJQPBd8ivZzIa7w6Q1
Q5I3LVZhZ3abc1uhLKNYD5GcG9i6cMTCqwrPKwm8L66YHzwClabh6fJI9QBzCU/6
8QIDAQAB
-----END PUBLIC KEY-----`,
		NullifierSeed: 12345678,
		SignalHash:    1001,
	}

	inputsMarshal, err := inputs.InputsMarshal()
	require.NoError(t, err)
	require.NotNil(t, inputsMarshal)
	debugLog(t, string(inputsMarshal))

	expected, err := os.ReadFile("testdata/inputs.json")
	require.NoError(t, err)
	require.JSONEq(t, string(expected), string(inputsMarshal))
}

func TestLatestQR(t *testing.T) {
	testDataLatest := "695108307045527203055615552134508634869313570553666038981516495163024606686331047866122668409600226925739924893071848414592481335424213584552753291786592939775072103117734818539256508832977708285847841015059559605863774303038302656349752893941881228757909093356158777312001076515703003069270314684506740151408562554687282897620399029276123086022471216698306684853607833641088998702587121769034284067244504349495896476559629455171007417135602941831212413748772309495421790796800593664480405732055819523144191517261133182486977695617103732047134680782075119216709770201511300756012070432334124054405235736909118586930655767904546932773444833614517050245926793832856072579336685572554956176486136018405194370018949537431342597817615642511126765383497527044075934491821346401991670475738449275992574588121498425412764928177474862670723747918472073471473907629224575396602023804751537435684958439304981404413943293977529969017643003462437170136830223830779392043801483506222427742472096635118228799985413436700606150533836994393566861634444888946568423412418398182944932557558673444181691672995543033402380849569288061442537262987130078005494906181956004256839466603233411326709427120017914108081478908557254065314227665902662447290282051123948049639446093506382097643209569059230995159036957942757734405205858318768265704102826105780114152264797022307373500785133790674854473648086457721067256913022806027477483486722050604545165388372693213176582919578420007588707629919875621884721874680339513702814697626878311580641322434758194191843879240706920337317202269323533069377854028512151415405647159931101362984355233648516171799322931603928079937332743834019887902707218015029755219636197181650551826766498043525488866528714972491839417984535199205321206907705638477872989467929564200933404416065672953370469755795005660224938584913675002703098385661382524581078619768488937970221844030333431889603140620308440161595608319938893105946745222799079961164315680188736851985359545743919311557620366610626082741415849933533588214629290545298757018325441444661947996347419719016587646985238919494885369622168935380136091039667579892682373455425547256058872990912658450242805003080184999495827256856281540141277202346320593476133280799966293411808088766229785247989977270920487858120041702732555579215698961605001611080350909869425891851002500464737648985561188235520357650718124587721510956030579455241890003626930791768759082044181165554172003945142514954060392533629533811746749728120883038401680270197987816820628320107936814775326656548348932340465838917045707361942013223561624899595434147762790909018087612914982176645308240725926529385065917281757786294671696940198619254175278103610892053880528543101721906431428452494452604335072106960191047138171733126158358747690178671851934935474403347435666165598282199961104298662217886211153837780176280426239288811010729649252784361592992717160016580016706006474468462072012972787077457530409731951803930138629983184470827739771241437773236358460934820548144374074453868379263749834455474422932083208765111542026038632709693759615556530972152115647140198005849550756069240397564027946567973982374470878485995773123172584724710911121715322581234893611157257180865907808606351556587343186599891515120742364659963809865296839985442766693947728610017920732148290111662035369534531752197423978839784999794667341185327825178775185490889231092846495"

	qrDataBI, ok := big.NewInt(0).SetString(testDataLatest, 10)
	require.True(t, ok)
	inputs := &AnonAadhaarV1Inputs{
		QRData:                          qrDataBI,
		IssuerID:                        "did:iden3:privado:main:2Si3eZUE6XetYsmU5dyUK2Cvaxr1EEe65vdv2BML4L",
		CredentialSubjectID:             "did:iden3:privado:main:2Scn2RfosbkQDMQzQM5nCz3Nk5GnbzZCWzGCd3tc2G",
		CredentialStatusRevocationNonce: 954548273,
		CredentialStatusID:              "https://issuer-node-core-api-demo.privado.id/v2/agent",
		PubKey: `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlegfdQZZXMJirdz93TXY
BAVbKt9G3HGcVrWO7hmZle+hoyVHEGIKx4Ael29E475FTbDxkOP31ONZiXIRc0Te
Uvz3gm+ElIipWaez0h623QNFFmLqiD7u796ImhSZuaR/lQTF8JbCYrltI9GXUDMt
npfrYUHSYd6XmU1MQWPKnL4+B3IhtEJT3PgWCUKLaDUe4+m2DSs1H9qm7owoqEUj
n5fefMD+XRROR0gT+0PsWD+BtO4yjCIWczSJjSELoBeibsaJQPBd8ivZzIa7w6Q1
Q5I3LVZhZ3abc1uhLKNYD5GcG9i6cMTCqwrPKwm8L66YHzwClabh6fJI9QBzCU/6
8QIDAQAB
-----END PUBLIC KEY-----`,
		NullifierSeed: 12345678,
		SignalHash:    1001,
	}

	inputsMarshal, err := inputs.InputsMarshal()
	require.NoError(t, err)
	fmt.Println(string(inputsMarshal))
}

func TestAnonAadhaarPubSignalsUnmarshaling(t *testing.T) {
	publicInputs, err := os.ReadFile("testdata/outputs.json")
	require.NoError(t, err)

	signals := &AnonAadhaarV1PubSignals{}
	err = signals.PubSignalsUnmarshal(publicInputs)
	require.NoError(t, err)

	expected := AnonAadhaarV1PubSignals{
		PubKeyHash:     "15134874015316324267425466444584014077184337590635665158241104437045239495873",
		Nullifier:      "20883870714734602590504997352338571539423183306657935615322485719404078821399",
		HashIndex:      "8923283466217416480773874563455206948461339349268869321689548437848985912355",
		HashValue:      "8516819303316620709053690018385969135966989083300174900628437254826157571292",
		IssuanceDate:   "1552023000",
		ExpirationDate: "1567799640",
		NullifierSeed:  12345678,
		SignalHash:     1001,
		TemplateRoot:   "19885546056720838706860449020869651677281577675447204956487418402102594191373",
	}

	require.Equal(t, expected, *signals)
}

func TestW3CCredential(t *testing.T) {
	expectedCredential := `{
    "@context": [
      "https://www.w3.org/2018/credentials/v1",
      "https://schema.iden3.io/core/jsonld/iden3proofs.jsonld",
      "https://gist.githubusercontent.com/ilya-korotya/078de56c274d44ea5a9579e137bd4301/raw/bfc67afc2246cf40a3fc508f0de9f689f318373d/AnonAadhaar.jsonld"
    ],
    "type": [
      "VerifiableCredential",
      "AnonAadhaar"
    ],
    "issuanceDate": "2019-03-08T05:30:00Z",
	"expirationDate": "2019-09-06T19:54:00Z",
    "credentialSubject": {
      "birthday": 19840101,
      "gender": 77,
      "id": "did:iden3:privado:main:2Scn2RfosbkQDMQzQM5nCz3Nk5GnbzZCWzGCd3tc2G",
      "pinCode": 110051,
      "state": 452723500356,
      "type": "AnonAadhaar"
    },
    "credentialStatus": {
      "id": "https://issuer-node-core-api-demo.privado.id/v2/agent",
      "revocationNonce": 954548273,
      "type": "Iden3commRevocationStatusV1.0"
    },
    "issuer": "did:iden3:privado:main:2Si3eZUE6XetYsmU5dyUK2Cvaxr1EEe65vdv2BML4L",
    "credentialSchema": {
      "id": "https://gist.githubusercontent.com/ilya-korotya/601c46ca5a7487ae6e1946b4aab22b1d/raw/3aa88a8dd666253869fb0d86ae58d0ce3d040203/AnonAadhaar.json",
      "type": "JsonSchema2023"
    }
}`

	bi, ok := big.NewInt(0).SetString(testdata, 10)
	require.True(t, ok)
	inputs := AnonAadhaarV1Inputs{
		QRData:                          bi,
		IssuerID:                        "did:iden3:privado:main:2Si3eZUE6XetYsmU5dyUK2Cvaxr1EEe65vdv2BML4L",
		CredentialSubjectID:             "did:iden3:privado:main:2Scn2RfosbkQDMQzQM5nCz3Nk5GnbzZCWzGCd3tc2G",
		CredentialStatusRevocationNonce: 954548273,
		CredentialStatusID:              "https://issuer-node-core-api-demo.privado.id/v2/agent",
		PubKey: `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlegfdQZZXMJirdz93TXY
BAVbKt9G3HGcVrWO7hmZle+hoyVHEGIKx4Ael29E475FTbDxkOP31ONZiXIRc0Te
Uvz3gm+ElIipWaez0h623QNFFmLqiD7u796ImhSZuaR/lQTF8JbCYrltI9GXUDMt
npfrYUHSYd6XmU1MQWPKnL4+B3IhtEJT3PgWCUKLaDUe4+m2DSs1H9qm7owoqEUj
n5fefMD+XRROR0gT+0PsWD+BtO4yjCIWczSJjSELoBeibsaJQPBd8ivZzIa7w6Q1
Q5I3LVZhZ3abc1uhLKNYD5GcG9i6cMTCqwrPKwm8L66YHzwClabh6fJI9QBzCU/6
8QIDAQAB
-----END PUBLIC KEY-----`,
		NullifierSeed: 12345678,
		SignalHash:    1001,
	}
	w3cCred, err := inputs.W3CCredential()
	require.NoError(t, err)
	w3cCred.ID = "" // drop the ID for comparing JSON
	w3cCredeJSON, err := json.Marshal(w3cCred)
	require.NoError(t, err)
	require.JSONEq(t, expectedCredential, string(w3cCredeJSON))
}

func debugLog(t *testing.T, message string) {
	t.Helper()
	if *debug {
		t.Log(message)
	}
}
